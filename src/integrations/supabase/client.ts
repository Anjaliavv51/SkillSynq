
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from '@/hooks/use-toast';

const SUPABASE_URL = "https://xjijvuqzuyinsqtnieaq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhqaWp2dXF6dXlpbnNxdG5pZWFxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc1NDc2MjEsImV4cCI6MjA2MzEyMzYyMX0.-hZLTziyxKsywnVliFJoGUFx4E93XKIHXTu6OfQDNnk";

// Check if required keys exist
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error("Missing Supabase credentials");
  toast?.error("Application configuration error. Please contact support.");
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
      storageKey: 'skillsync-auth-token',
      // Session timeout after 8 hours of inactivity
      detectSessionInUrl: true,
    },
  }
);

// Add global error handler for network issues
window.addEventListener('offline', () => {
  toast?.warning("You appear to be offline. Some features may be unavailable.");
});

window.addEventListener('online', () => {
  toast?.success("You're back online!");
});

// Function to handle common API errors
export const handleApiError = (error: any, defaultMessage = "An error occurred") => {
  console.error("API Error:", error);
  
  // Extract message from different error formats
  const message = 
    error?.message || 
    error?.error_description || 
    error?.error || 
    defaultMessage;
    
  toast.error(message);
  
  return message;
};

// Set up auth state change listener
supabase.auth.onAuthStateChange((event, session) => {
  if (event === 'SIGNED_OUT') {
    toast.info("You have been signed out.");
  }
  
  if (event === 'SIGNED_IN') {
    toast.success("Welcome back!");
  }
  
  // Auto-refresh tokens when they're about to expire
  if (session && session.expires_at) {
    const expiresAt = new Date(session.expires_at * 1000);
    const now = new Date();
    const timeUntilExpiry = expiresAt.getTime() - now.getTime();
    
    // If token expires in less than 5 minutes, refresh it
    if (timeUntilExpiry < 300000) {
      supabase.auth.refreshSession();
    }
  }
});
